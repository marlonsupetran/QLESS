@page "/entrance"

@using QLESS.Core.BusinessRules
@inject GateBusinessRules GateBusinessRules
@inject IJSRuntime JsRuntime

<div class="mb-3 col-sm-12">
    <h3>Gate Entrance Demo</h3>
    <hr class="col-sm-12" />

    <EditForm EditContext="@EditContext">
        <DataAnnotationsValidator />

        <div class="form-group row">
            <label for="id" class="col-sm-2 col-form-label">Card Number</label>
            <div class="col-sm-6">
                <InputText id="number"
                           class="form-control"
                           placeholder="Scan card or enter card id manually..."
                           autofocus
                           @oninput="@OnInput"
                           Value="@Model.CardNumberAsString"
                           ValueExpression="() => Model.CardNumberAsString"></InputText>
                <ValidationMessage For="@(() => Model.CardNumber)"></ValidationMessage>
            </div>
        </div>

        @* Error *@
        @if (!string.IsNullOrWhiteSpace(Error))
        {
            <p class="h1 col-sm-8 p-0 validation-message">@Error</p>
        }

        @* Toasts *@
        <div id="snackbar">Card successfully checked-in!</div>

    </EditForm>
</div>

@code {
    private EditContext EditContext { get; set; }
    private CardModel Model { get; set; }
    private string Error { get; set; }

    protected override void OnInitialized()
    {
        Model = new CardModel();
        EditContext = new EditContext(Model);
        base.OnInitialized();
    }
    private async Task OnInput(ChangeEventArgs args)
    {
        try
        {
            Error = string.Empty;
            if (Guid.TryParse(args.Value.ToString(), out var parsed))
            {
                GateBusinessRules.Enter(parsed, 0);
                await JsRuntime.InvokeVoidAsync("showToastNofification");

                await Task.Delay(5000);
                Model.CardNumber = Guid.Empty;
            }
            else
            {
                Model.CardNumber = Guid.Empty;
            }
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            Model.CardNumber = Guid.Empty;
        }
    }

    // Nested Classes
    class CardModel
    {
        public string CardNumberAsString
        {
            get => CardNumber != Guid.Empty ? CardNumber.ToString() : null;
            set => CardNumber = Guid.TryParse(value, out var parsed) ? parsed : Guid.Empty;
        }

        [RegularExpression(
            "^((?!00000000-0000-0000-0000-000000000000).)*$",
            ErrorMessage = "Card number must be a valid guid format.")]
        [Required]
        public Guid CardNumber { get; set; }
    }
}
